name: Deploy Next.js App to AWS ECS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-northeast-1

jobs:
  # Build and Test Job (runs on all pushes and PRs)
  build-and-test:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test -- --passWithNoTests

    - name: Build application
      run: npm run build

    - name: Run lint
      run: npm run lint

  # Deploy Job (only runs on main/develop branches)
  deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set environment variables
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "PROJECT_NAME=${{ vars.PROJECT_NAME || 'nextjs-app' }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "PROJECT_NAME=${{ vars.PROJECT_NAME || 'nextjs-app' }}" >> $GITHUB_ENV
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get ECR repository URI
      id: ecr-repo
      run: |
        REPO_URI=$(aws ecr describe-repositories \
          --repository-names "${PROJECT_NAME}-${ENVIRONMENT}" \
          --query 'repositories[0].repositoryUri' \
          --output text \
          --region ${{ env.AWS_REGION }})
        echo "repository-uri=$REPO_URI" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.repository-uri }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push image with multiple tags
        docker buildx build \
          --platform linux/amd64 \
          --tag $ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REPOSITORY:latest \
          --tag $ECR_REPOSITORY:${{ env.ENVIRONMENT }}-latest \
          --push .
        
        echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "latest-image=$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

    - name: Get ECS cluster and service info
      id: ecs-info
      run: |
        CLUSTER_NAME="${PROJECT_NAME}-${ENVIRONMENT}-cluster"
        SERVICE_NAME="${PROJECT_NAME}-${ENVIRONMENT}-service"
        
        echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        echo "Updating ECS service..."
        aws ecs update-service \
          --cluster ${{ steps.ecs-info.outputs.cluster-name }} \
          --service ${{ steps.ecs-info.outputs.service-name }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for service stability
      run: |
        echo "Waiting for service to become stable..."
        aws ecs wait services-stable \
          --cluster ${{ steps.ecs-info.outputs.cluster-name }} \
          --services ${{ steps.ecs-info.outputs.service-name }} \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 900 \
          --cli-connect-timeout 60

    - name: Get deployment status
      run: |
        echo "Getting service status..."
        aws ecs describe-services \
          --cluster ${{ steps.ecs-info.outputs.cluster-name }} \
          --services ${{ steps.ecs-info.outputs.service-name }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition}' \
          --output table

    - name: Get service URL
      id: service-url
      run: |
        # Get the load balancer DNS name if available
        ALB_ARN=$(aws ecs describe-services \
          --cluster ${{ steps.ecs-info.outputs.cluster-name }} \
          --services ${{ steps.ecs-info.outputs.service-name }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0].loadBalancers[0].targetGroupArn' \
          --output text 2>/dev/null || echo "")
        
        if [ "$ALB_ARN" != "" ] && [ "$ALB_ARN" != "None" ]; then
          ALB_DNS=$(aws elbv2 describe-target-groups \
            --target-group-arns $ALB_ARN \
            --query 'TargetGroups[0].LoadBalancerArns[0]' \
            --output text 2>/dev/null | xargs -I {} aws elbv2 describe-load-balancers \
            --load-balancer-arns {} \
            --query 'LoadBalancers[0].DNSName' \
            --output text 2>/dev/null || echo "")
          
          if [ "$ALB_DNS" != "" ] && [ "$ALB_DNS" != "None" ]; then
            echo "service-url=http://$ALB_DNS" >> $GITHUB_OUTPUT
            echo "✅ Application URL: http://$ALB_DNS"
          else
            echo "service-url=N/A" >> $GITHUB_OUTPUT
            echo "⚠️ Could not determine application URL"
          fi
        else
          echo "service-url=N/A" >> $GITHUB_OUTPUT
          echo "⚠️ No load balancer found for service"
        fi

    - name: Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ env.ENVIRONMENT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | ${{ steps.build-image.outputs.image }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cluster | ${{ steps.ecs-info.outputs.cluster-name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Service | ${{ steps.ecs-info.outputs.service-name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Application URL | ${{ steps.service-url.outputs.service-url }} |" >> $GITHUB_STEP_SUMMARY

  # Security Scan Job (optional)
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set environment variables
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "PROJECT_NAME=${{ vars.PROJECT_NAME || 'nextjs-app' }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "PROJECT_NAME=${{ vars.PROJECT_NAME || 'nextjs-app' }}" >> $GITHUB_ENV
        fi

    - name: Run ECR image scan
      run: |
        REPO_NAME="${PROJECT_NAME}-${ENVIRONMENT}"
        
        echo "Starting image scan for repository: $REPO_NAME"
        
        # Start image scan
        aws ecr start-image-scan \
          --repository-name $REPO_NAME \
          --image-id imageTag=latest \
          --region ${{ env.AWS_REGION }} || echo "Scan already in progress or recently completed"
        
        # Wait a bit for scan to complete
        sleep 30
        
        # Get scan results
        echo "Getting scan results..."
        aws ecr describe-image-scan-findings \
          --repository-name $REPO_NAME \
          --image-id imageTag=latest \
          --region ${{ env.AWS_REGION }} \
          --query 'imageScanFindingsSummary.findingCounts' \
          --output table || echo "Scan still in progress or no findings available"